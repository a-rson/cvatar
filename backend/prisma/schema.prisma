generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  provider
  client
  admin
}

enum AgentStyle {
  formal
  casual
  concise
  enthusiastic
}

enum AgentTone {
  neutral
  friendly
  professional
  humorous
}

enum AnswerLength {
  short
  medium
  long
}

enum TokenType {
  one_time
  time_limited
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  type      UserType
  createdAt DateTime @default(now())

  profile        Profile?
  createdTokens  Token[]          @relation("TokenCreator")
  receivedTokens Token[]          @relation("TokenReceiver")
  accessLogs     TokenAccessLog[]
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())

  user              User               @relation(fields: [userId], references: [id])
  candidateProfiles CandidateProfile[]
  companyProfiles   CompanyProfile[]
  documents         Document[]         @relation("ProfileDocuments")
}

model CandidateProfile {
  id                String   @id @default(uuid())
  profileId         String
  name              String
  firstName         String
  lastName          String
  description       String?
  maritalStatus     String?
  avatarUrl         String?
  education         String[]
  spokenLanguages   String[]
  yearsOfExperience Int
  softSkills        String[]

  profile        Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  workExperience WorkExperience[]
  techStack      TechStack[]
  agent          Agent?           @relation("CandidateAgent")
  tokens         Token[]
  accessLogs     TokenAccessLog[]
}

model CompanyProfile {
  id           String   @id @default(uuid())
  profileId    String
  name         String
  companyName  String
  description  String?
  logoUrl      String?
  services     String[]
  teamSize     Int
  contactEmail String
  contactPhone String?

  profile    Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  techStack  TechStack[]
  agent      Agent?           @relation("CompanyAgent")
  tokens     Token[]
  accessLogs TokenAccessLog[]
}

model Agent {
  id                 String        @id @default(uuid())
  candidateProfileId String?       @unique
  companyProfileId   String?       @unique
  language           String?
  style              AgentStyle?
  tone               AgentTone?
  answerLength       AnswerLength?
  introPrompt        String?
  disclaimerText     String?
  customInstructions String?
  name               String?

  candidateProfile CandidateProfile? @relation("CandidateAgent", fields: [candidateProfileId], references: [id], onDelete: Cascade)
  companyProfile   CompanyProfile?   @relation("CompanyAgent", fields: [companyProfileId], references: [id], onDelete: Cascade)
  documents        Document[]        @relation("AgentDocuments")
  chatLogs         ChatLog[]
}

model WorkExperience {
  id                 String @id @default(uuid())
  candidateProfileId String
  position           String
  company            String
  years              Int

  candidateProfile CandidateProfile @relation(fields: [candidateProfileId], references: [id], onDelete: Cascade)
}

model TechStack {
  id                 String  @id @default(uuid())
  candidateProfileId String?
  companyProfileId   String?
  category           String
  name               String

  candidateProfile CandidateProfile? @relation(fields: [candidateProfileId], references: [id], onDelete: Cascade)
  companyProfile   CompanyProfile?   @relation(fields: [companyProfileId], references: [id], onDelete: Cascade)
}

model Document {
  id        String   @id @default(uuid())
  profileId String
  title     String
  content   String
  createdAt DateTime @default(now())

  profile Profile @relation("ProfileDocuments", fields: [profileId], references: [id], onDelete: Cascade)
  agents  Agent[] @relation("AgentDocuments")
}

model Token {
  id               String    @id @default(uuid())
  name             String
  token            String    @unique
  type             TokenType
  used             Boolean   @default(false)
  expiresAt        DateTime?
  createdAt        DateTime  @default(now())
  wasStoredInRedis Boolean   @default(false)
  createdById      String
  userId           String?

  candidateProfileId String?
  companyProfileId   String?

  candidateProfile CandidateProfile? @relation(fields: [candidateProfileId], references: [id], onDelete: Cascade)
  companyProfile   CompanyProfile?   @relation(fields: [companyProfileId], references: [id], onDelete: Cascade)

  createdBy User  @relation("TokenCreator", fields: [createdById], references: [id])
  user      User? @relation("TokenReceiver", fields: [userId], references: [id])

  accessLogs TokenAccessLog[]
}

model TokenAccessLog {
  id                 String   @id @default(uuid())
  tokenId            String
  userId             String?
  candidateProfileId String?
  companyProfileId   String?
  accessedAt         DateTime @default(now())

  token            Token             @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  user             User?             @relation(fields: [userId], references: [id])
  candidateProfile CandidateProfile? @relation(fields: [candidateProfileId], references: [id])
  companyProfile   CompanyProfile?   @relation(fields: [companyProfileId], references: [id])
}

model ChatLog {
  id        String   @id @default(uuid())
  agentId   String
  message   String
  sender    String
  timestamp DateTime @default(now())

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
}
