generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  provider
  client
  admin
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  type      UserType
  profiles  Profile[] // relevant only if type === "provider"
  createdAt DateTime  @default(now())

  createdTokens Token[]        @relation("TokenCreator")
  usedTokens    Token[]        @relation("TokenUser")
  accessLogs    TokenAccessLog[]
}

model Profile {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())

  user       User              @relation(fields: [userId], references: [id])
  candidate  CandidateProfile?
  company    CompanyProfile?
  botPersona BotPersona?
  tokens     Token[]
  accessLogs TokenAccessLog[]
}

model CandidateProfile {
  profileId         String   @id
  name              String
  firstName         String
  lastName          String
  description       String?
  maritalStatus     String?
  avatarUrl         String?
  education         String[]
  spokenLanguages   String[]
  yearsOfExperience Int
  softSkills        String[]

  profile        Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  workExperience WorkExperience[]
  techStack      TechStack[]
  documents      Document[]
}

model CompanyProfile {
  profileId    String      @id
  name         String
  companyName  String
  description  String?
  logoUrl      String?
  services     String[]
  techStack    TechStack[]
  teamSize     Int
  contactEmail String
  contactPhone String?

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id                 String @id @default(uuid())
  candidateProfileId String
  position           String
  company            String
  years              String

  candidateProfile CandidateProfile @relation(fields: [candidateProfileId], references: [profileId], onDelete: Cascade)
}

model TechStack {
  id                 String  @id @default(uuid())
  candidateProfileId String?
  companyProfileId   String?
  category           String
  name               String

  candidateProfile CandidateProfile? @relation(fields: [candidateProfileId], references: [profileId], onDelete: Cascade)
  companyProfile   CompanyProfile?   @relation(fields: [companyProfileId], references: [profileId], onDelete: Cascade)
}

model Document {
  id                 String   @id @default(uuid())
  candidateProfileId String
  title              String
  content            String
  createdAt          DateTime @default(now())

  candidateProfile CandidateProfile @relation(fields: [candidateProfileId], references: [profileId], onDelete: Cascade)
}

model Token {
  id            String   @id @default(uuid())
  name          String
  token         String   @unique
  profileId     String
  createdById   String
  userId        String?       // optional: client user who received this token
  type          String        // "one-time" | "user-bound" | "time-limited"
  used          Boolean  @default(false)
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  wasStoredInRedis Boolean @default(false)

  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdBy     User     @relation("TokenCreator", fields: [createdById], references: [id])
  user          User?    @relation("TokenUser", fields: [userId], references: [id])

  accessLogs    TokenAccessLog[]
}

model TokenAccessLog {
  id         String   @id @default(uuid())
  tokenId    String
  userId     String?           // null if anonymous
  profileId  String
  accessedAt DateTime @default(now())

  token      Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])
  profile    Profile  @relation(fields: [profileId], references: [id])
}

model BotPersona {
  id          String  @id @default(uuid())
  profileId   String  @unique
  style       String? // 'formal', 'casual', etc.
  language    String? // 'en', 'pl', etc.
  introPrompt String?

  profile  Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  chatLogs ChatLog[]
}

model ChatLog {
  id           String   @id @default(uuid())
  botPersonaId String
  message      String
  sender       String // 'bot' | 'recruiter'
  timestamp    DateTime @default(now())

  botPersona BotPersona @relation(fields: [botPersonaId], references: [id], onDelete: Cascade)
}
